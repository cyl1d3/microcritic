@page "/gamedetails/{id}"
@using Microsoft.AspNetCore.Components;
@using microcritic.Shared.ViewModels

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager navigationManager

@if (_game is null)
{
	<p>...</p>
}
else
{
	<div class="w-100 h-100 d-flex justify-content-center mt-5 mb-5">
		<div class="d-flex w-75">
			<div class="d-flex align-items-center justify-content-center" style="border:1px solid black; min-width:200px; min-height:323px">
				<Icon Name="FontAwesomeIcons.Gamepad" class="game-placeholder" />
			</div>
			<div class="flex-column w-75 ml-2">
				<ul class="list-group list-group-flush">					
					<li class="list-group-item"><h3>@_game?.Name</h3></li>
					<li class="list-group-item"><h4>@_game.Developer.Name</h4><ScoreDisplay Score="@_game.Score" ReviewCount="@_game.ReviewCount" /></li>
					<li class="list-group-item">@_game.Description</li>				
				</ul>
			</div>	
		</div>
	</div>
	<div class="w-100 h-100 d-flex justify-content-center mt-5 mb-5">
		<div class="d-flex w-75">
			<UserReview @ref="_userReview" Game="_game" OnReviewChanged="ReloadComponents" />
		</div>
	</div>	
	<div class="w-100 h-100 d-flex justify-content-center mt-5 mb-5">
		<div class="d-flex w-75">
			<ReviewList @ref="_reviewList" Game="_game" OnReviewsChanged="ReloadComponents" />
		</div>
	</div>
}

@code {

	[Parameter]
	public string Id { get; set; }

	private Game _game;
	private UserReview _userReview;
	private ReviewList _reviewList;
	
	protected override async Task OnInitializedAsync()
	{
		base.OnInitialized();
		await Refresh();
	}

	private async Task Refresh()
	{
		var http = HttpClientFactory.CreateClient("microcritic.ServerAPI.public");
		_game = await http.GetFromJsonAsync<Game>($"/api/Games/Game/{Id}");
		StateHasChanged();
	}

	private async Task ReloadComponents()
	{
		await Refresh();
		await _userReview.Refresh();
		await _reviewList.Refresh();
	}

}
