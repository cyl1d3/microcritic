@using Blazorise.Icons.FontAwesome
@using microcritic.Shared.Enums
@using microcritic.Shared.ViewModels
@using microcritic.Client.Logic

@inject IHttpClientFactory HttpClientFactory

<div class="flex-column d-flex justify-content-center w-100">
	@foreach(var review in _reviews?.Take(_pagesize) ?? Array.Empty<Review>())
	{
		<div class="card border-secondary mb-3 w-75 align-self-center" >
			<div class="card-header">
				<div class="flex-row">
					<div class="d-flex float-left align-items-center justify-content-center mr-2" style="border:1px solid black; border-radius:5px; min-width:40px; min-height:40px" >
						<Icon Name="@GetFaceholder(review.Rating)" IconStyle="Blazorise.IconStyle.Regular" class="face-placeholder" />
					</div>
					<span>@review.UserName.UnEmail()</span>
					<span class="float-right"><small>@review.DateString</small></span>
				</div>
			</div>
			<div class="card-body">
				<div class="float-right"><ScoreDisplay Score="(decimal)review.Rating"/></div>
				<p class="card-text mt-1">@review.Text</p>
				<AuthorizeView Roles="Admin">
					<Authorized>
						<button type="button" class="btn btn-outline-danger float-right" @onclick="() => Delete(review)">Löschen</button>
					</Authorized>
				</AuthorizeView>
			</div>
		</div>
	}
	<div class="mt-2">
		<Paginator @ref="_paginator" Collection="_reviews" OnPageChange="Refresh" Pagesize="_pagesize" />
	</div>
</div>

@code {
	[Parameter]
	public Game Game { get; set; }
	
    [Parameter]
    public EventCallback OnReviewsChanged { get; set; }

	private int _pagesize = 5;
	private Paginator _paginator = new();
	private Review[] _reviews;

	protected override async Task OnInitializedAsync()
	{
		base.OnInitialized();
		await Refresh();
	}
		
	public async Task Refresh()
	{
		var http = HttpClientFactory.CreateClient("microcritic.ServerAPI.public");
		_reviews = await http.GetFromJsonAsync<Review[]>($"/api/Reviews/Game/{Game.Id}/{_paginator.Page}");
		StateHasChanged();
	}

	private async Task Delete(Review review)
	{
		var http = HttpClientFactory.CreateClient("microcritic.ServerAPI");
		await http.DeleteAsync($"/api/Reviews/Delete/{review.Id}");

		await OnReviewsChanged.InvokeAsync();
	}

	private string GetFaceholder(Rating rating)
		=> rating switch
		{			
			Rating.Schwach => FontAwesomeIcons.SadCry,
			Rating.Enttäuschend => FontAwesomeIcons.Frown,
			Rating.Durchschnittlich => FontAwesomeIcons.Meh,
			Rating.Gut => FontAwesomeIcons.SmileBeam,
			Rating.Ausgezeichnet => FontAwesomeIcons.GrinStars,
			_ => FontAwesomeIcons.MehBlank,
		};
}
