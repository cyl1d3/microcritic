@using System.Linq
@using microcritic.Shared.Enums
@using microcritic.Shared.ViewModels

@inject IHttpClientFactory HttpClientFactory

<div class="flex-column w-100">
    <AuthorizeView>
        <Authorized>
            @if (_myReview is not null)
            {
                @if (_myReview.Id == Guid.Empty)
                {
                    <h4>Lass ein Review da!</h4>
                    <div>
                        <EditForm Model="_myReview" OnValidSubmit="SaveReview" Context="formContext">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <ul class="list-group list-group-flush">					
                                <li class="list-group-item">
                                    <select class="form-select" @bind="_myReview.Rating">
                                        @foreach(var rating in Enum.GetValues(typeof(Rating)).OfType<Rating>().Reverse())
                                        {
                                            <option value="@rating">@rating</option>
                                        }
                                    </select>
                                </li>
                                <li class="list-group-item">
                                    <textarea placeholder="Teil uns deine Meinung mit!" class="form-control" rows="5" @bind="_myReview.Text" />
                                </li>
                                <li class="list-group-item">
                                    <button class="btn btn-primary float-right" type="submit">Speichern</button>
                                </li>
                            </ul>
                        </EditForm>
                    </div>
                }
                else
                {
                    <h4>Dein Review</h4>
                    <div>
                        <ul class="list-group list-group-flush">					
                            <li class="list-group-item"><ScoreDisplay Score="(decimal)_myReview.Rating" /></li>
                            <li class="list-group-item">@_myReview.Text</li>
                        </ul>
                    </div>
                }
            }
        </Authorized>
        <NotAuthorized>
            <p>Bitte <a href="/authentication/login">einloggen</a>, um ein Review zu hinterlassen.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
	public Game Game { get; set; }

    [Parameter]
    public EventCallback OnReviewChanged { get; set; }

    private Review _myReview;
    private AuthenticationState _authState;

	protected async override Task OnInitializedAsync()
    {
        _authState = await authenticationStateTask;
        if (_authState.User.Identity.IsAuthenticated)
        {
            await Refresh();
        }
    }

    public async Task Refresh()
    {
		var http = HttpClientFactory.CreateClient("microcritic.ServerAPI");
        _myReview = await http.GetFromJsonAsync<Review>($"/api/Reviews/Game/{Game.Id}/User/{_authState.User.Identity.Name}");

        StateHasChanged();
	}

    private async Task SaveReview()
    {
        var http = HttpClientFactory.CreateClient("microcritic.ServerAPI");
        await http.PostAsJsonAsync("/api/Reviews/Add", _myReview);

        await OnReviewChanged.InvokeAsync();
    }

}
