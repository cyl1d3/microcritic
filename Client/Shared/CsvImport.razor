@inject IHttpClientFactory HttpClientFactory
@using System.Globalization;
@using System.IO
@using Blazorise.Icons.FontAwesome
@using CsvHelper
@using microcritic.Shared.ViewModels


<div class="m-4">
    <div class="flex-column">
        <div class="form-group">
            <div class="w-100 row">
                <div class="w-75 pl-2">
                    <Blazorise.Bootstrap.FileEdit class="@($"{(_error ? "is-invalid" : "")} pl-5")" Changed="@LoadFile" />                
                </div>
                <div class="w-25 p-2">
                    <Icon Name="@(_error ? FontAwesomeIcons.TimesCircle : FontAwesomeIcons.CheckCircle)" 
                        IconStyle="Blazorise.IconStyle.Regular"
                        Class="@($"{(_error ? "text-danger" : "text-success")} {(HasRecords || _error ? "" : "collapse")} erroricon")" />                
                </div>
            </div>
            <div style="min-height: 40px;">
                <span class="text-danger float-left @(_error ? "" : "collapse")">Fehler beim Einlesen des CSV!</span>  
                <span class="text-success float-left @(_success ? "" : "collapse")">@_inserts Spiel(e) neu angelegt.</span>  
            </div>
        </div>
        <div class="">
            <Blazorise.Bootstrap.Button
                Class=""
                Color="Blazorise.Color.Primary"
                Loading="_processing" 
                Disabled="!HasRecords"
                @onclick="SaveGames">
                Upload
            </Blazorise.Bootstrap.Button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnGamesChanged { get; set; }

    public bool HasRecords => (_games?.Count() ?? 0) > 0;

    private IEnumerable<CsvGame> _games;
    private bool _processing;   //application is doing something, show spinner on button
    private bool _success;      //import successful, show message
    private int _inserts;       //number of games inserted
    private bool _error;        //error processing csv

    private async Task LoadFile(Blazorise.FileChangedEventArgs args)
    {
        if (args.Files.Count() == 0) return;

        _success = false;
        _inserts = 0;
        _error = false;
        _processing = true;

        try
        {
            //read file content into string, feed string into csv processor
            var file = args.Files.FirstOrDefault();
            var content = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
            using var csv = new CsvReader(new StringReader(content), CultureInfo.InvariantCulture);

            _games = csv.GetRecords<CsvGame>().ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            _error = true;
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private async Task SaveGames()
    {
        //send csv records to backend for saving
        _processing = true;
        var http = HttpClientFactory.CreateClient("microcritic.ServerAPI");
        var result = await http.PostAsJsonAsync("/api/Games/AddCsv", _games);

        if(result.IsSuccessStatusCode)
        {
            _success = true;
            //server returns inserted records, display number in success message
            _inserts = (await result.Content.ReadFromJsonAsync<IEnumerable<Game>>()).Count();
        }

        await OnGamesChanged.InvokeAsync();
        _games = null;
        _processing = false;
    }

}
